package mr04.custom_writable;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Objects;

import org.apache.hadoop.io.WritableComparable;
//https://hadoop.apache.org/docs/r3.1.1/api/org/apache/hadoop/io/Writable.html
public class StringPairWritable implements WritableComparable<StringPairWritable> {

    String left;
    String right;

    /**
     * Empty constructor - required for serialization.
     */
    public StringPairWritable()
    {

    }

    /**
     * Constructor with two String objects provided as input.
     */
    public StringPairWritable(String left, String right) {
        this.left = left;
        this.right = right;
    }

    /**
     * Serializes the fields of this object to out.
     */
    public void write(DataOutput out) throws IOException
    {
        out.writeUTF(this.left);
        out.writeUTF(this.right);
    }

    /**
     * Deserializes the fields of this object from in.
     */
    public void readFields(DataInput in) throws IOException
    {
        this.left = in.readUTF();
        this.right = in.readUTF();
    }

    /**
     * Compares this object to another StringPairWritable object by
     * comparing the left strings first. If the left strings are equal,
     * then the right strings are compared.
     */
    public int compareTo(StringPairWritable other)
    {
        int ret = this.left.compareTo(other.left);
        if(ret==0)
        {
            ret = this.right.compareTo(other.right);
        }
        return ret;
    }

    /**
     * A custom method that returns the two strings in the
     * StringPairWritable object inside parentheses and separated by
     * a comma. For example: "(left,right)".
     */
    public String toString() {
        return "(" + left + "," + right + ")";
    }

    /**
     * The equals method compares two StringPairWritable objects for
     * equality. The equals and hashCode methods have been automatically
     * generated by Eclipse by right-clicking on an empty line, selecting
     * Source, and then selecting the Generate hashCode() and equals()
     * option.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        StringPairWritable other = (StringPairWritable) obj;
        if (left == null) {
            if (other.left != null)
                return false;
        } else if (!left.equals(other.left))
            return false;
        if (right == null) {
            return other.right == null;
        } else return right.equals(other.right);
    }

    /**
     * The hashCode method generates a hash code for a StringPairWritable
     * object. The equals and hashCode methods have been automatically
     * generated by Eclipse by right-clicking on an empty line, selecting
     * Source, and then selecting the Generate hashCode() and equals()
     * option.
     */
    @Override
    public int hashCode() {
        return Objects.hash(right.hashCode() + left.hashCode());

    }
}
