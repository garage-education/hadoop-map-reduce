package mr04.custom_writable;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Objects;

import org.apache.hadoop.io.WritableComparable;

//https://hadoop.apache.org/docs/r3.1.1/api/org/apache/hadoop/io/Writable.html
public class StringPairWritable implements WritableComparable<StringPairWritable> {

    String left;
    String right;

    /**
     * Empty constructor - required for serialization.
     */
    public StringPairWritable() {

    }

    /**
     * Constructor with two String objects provided as input.
     */
    public StringPairWritable(String left, String right) {
        this.left = left;
        this.right = right;
    }

    /**
     * Serializes the fields of this object to out.
     */
    public void write(DataOutput out) throws IOException {
        out.writeUTF(this.left);
        out.writeUTF(this.right);
    }

    /**
     * Deserializes the fields of this object from in.
     */
    public void readFields(DataInput in) throws IOException {
        this.left = in.readUTF();
        this.right = in.readUTF();
    }

    /**
     * The equals method compares two StringPairWritable objects for
     * equality. The equals and hashCode methods have been automatically
     * generated by Eclipse by right-clicking on an empty line, selecting
     * Source, and then selecting the Generate hashCode() and equals()
     * option.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        StringPairWritable that = (StringPairWritable) o;
        return left.equals(that.left) && right.equals(that.right);
    }

    /**
     * The hashCode method generates a hash code for a StringPairWritable
     * object. The equals and hashCode methods have been automatically
     * generated by Eclipse by right-clicking on an empty line, selecting
     * Source, and then selecting the Generate hashCode() and equals()
     * option.
     */
    @Override
    public int hashCode() {
        return Objects.hash(left, right);
    }


    /**
     * A custom method that returns the two strings in the
     * StringPairWritable object inside parentheses and separated by
     * a comma. For example: "(left,right)".
     */
    @Override
    public String toString() {
        return "(" + left + "," + right + ")";

    }

    //https://newbedev.com/how-to-simplify-a-null-safe-compareto-implementation
    public static int nullSafeStringComparator(final String left, final String right) {
        if (left == null ^ right == null) {
            return (left == null) ? -1 : 1;
        }
        if (left == null && right == null) {
            return 0;
        }return left.compareTo(right);
    }

    /**
     * Compares this object to another StringPairWritable object by
     * comparing the left strings first. If the left strings are equal,
     * then the right strings are compared.
     */
    public int compareTo(StringPairWritable other) {
        if (other == null) {
            throw new NullPointerException();
        }
        int result = nullSafeStringComparator(this.left, other.left);
        if (result != 0) return result;
        return nullSafeStringComparator(this.right, other.right);

    }


}
